argo-cd:
  dex:
    # -- Enable dex
    enabled: false
  fullnameOverride: argocd
  apiVersionOverrides:
    ingress: networking.k8s.io/v1
  global:
    domain: ""
  configs:
    cm:
      accounts.jenkins: apiKey
      accounts.nlee: login
      accounts.rudgh21: login, apiKey
      admin.enabled: "true"
      url: http://rudgh21.com/argocd
    rbac:
      policy.csv: |
            p, role:readonly, logs, get, */*, allow
            p, role:admin, *, *, */*, allow
            p, role:admin, logs, get, */*, allow
            g, jenkins, role:admin
            g, nlee, role:admin
            g, rudgh21, role:admin
      policy.default: role:readonly
      scopes: "[email,groups]"
    params:
      ## NOTE: This value should be set when you generate params by other means as it changes ports used by ingress template.
      server.insecure: true
      # -- Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from /
      server.basehref: /
      # -- Used if Argo CD is running behind reverse proxy under subpath different from /
      server.rootpath: /argocd
      hydrator.enabled: "false"
    secret:
      createSecret: true
      extra:
        {
          # TODO
          # argo 1회 생성후, 서버에서 Token 발행 필요
          accounts.jenkins.tokens: '[{"id":"0688fc45-de10-4d78-8558-8e75cf67edea","iat":1714622812000}]',
          accounts.nlee.password: "$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa",
          accounts.rudgh21.password: "$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa"
        }
      argocdServerAdminPassword: "$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa"
      argocdServerAdminPasswordMtime: "'$(date +%FT%T%Z)'"
    repositories:
      azure:
        url: https://github.com/rodgh21/AzureTest_JAVA.git
        project: shr
      deploy:
        url: https://github.com/rodgh21/argo-deploy.git
        project: shr
      argo:
        url: https://github.com/rodgh21/argo.git
        project: shr
      appset:
        url: https://github.com/rodgh21/applicationset.git
        project: shr
      argorollout:
        url: https://github.com/rodgh21/argorollout.git
        project: shr
  repoServer:
    resources:
      requests:
        cpu: 0.5
        memory: 450Mi
    autoscaling:
      # -- Enable Horizontal Pod Autoscaler ([HPA]) for the repo server
      enabled: true
      # -- Minimum number of replicas for the repo server [HPA]
      minReplicas: 1
      # -- Maximum number of replicas for the repo server [HPA]
      maxReplicas: 5
      # -- Average CPU utilization percentage for the repo server [HPA]
      targetCPUUtilizationPercentage: 50
      # -- Average memory utilization percentage for the repo server [HPA]
      targetMemoryUtilizationPercentage: 50
      # -- Configures the scaling behavior of the target in both Up and Down directions.
      # This is only available on HPA apiVersion `autoscaling/v2beta2` and newer
      behavior:
        {}
        # scaleDown:
        #  stabilizationWindowSeconds: 300
        #  policies:
        #   - type: Pods
        #     value: 1
        #     periodSeconds: 180
        # scaleUp:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
        #     value: 2
        #     periodSeconds: 60

  controller:
    resources:
      requests:
        cpu: 0.5
        memory: 450Mi
    serviceAccount:
      # -- Create a service account for the application controller
      create: true
      # -- Service account name
      name: argocd-application-controller
      # -- Annotations applied to created service account
      # annotations:
      #   {
      #     # TODO
      #     # AICC Role 확인 필요
      #     eks.amazonaws.com/role-arn: arn:aws:iam::992382711213:role/eks-aicc-argo,
      #   }
      # # -- Automount API credentials for the Service Account
      # automountServiceAccountToken: false

  server:
    extraArgs:
      - "--insecure"  
      - "--port"
      - "7080"
    resources:
      requests:
        cpu: 0.5
        memory: 450Mi
    serviceAccount:
      # -- Create server service account
      create: true
      # -- Server service account name
      name: argocd-server
      # -- Annotations applied to created service account
      # annotations:
      #   {
      #     # TODO
      #     # AICC Role 확인 필요
      #     eks.amazonaws.com/role-arn: arn:aws:iam::992382711213:role/eks-aicc-argo,
      #   }
      # # -- Automount API credentials for the Service Account
      automountServiceAccountToken: true
    autoscaling:
      enabled: true
      # -- Minimum number of replicas for the Argo CD server [HPA]
      minReplicas: 1
      # -- Maximum number of replicas for the Argo CD server [HPA]
      maxReplicas: 5
      # -- Average CPU utilization percentage for the Argo CD server [HPA]
      targetCPUUtilizationPercentage: 50
      # -- Average memory utilization percentage for the Argo CD server [HPA]
      targetMemoryUtilizationPercentage: 50
    containerPorts: 
      server: 7080
      metrics: 7083
    # ingress:
    #   enabled: true
    #   ingressClassName: traefik
    #   hostname: rudgh21.com
    #   extraPaths:
    #     - path: /argo
    #       pathType: Prefix
    #       backend:
    #         service:
    #           name: argocd-server
    #           port:
    #             number: 80
    
    # Argo CD server ingress configuration
    ingress:
      # -- Enable an ingress resource for the Argo CD server
      enabled: true
      # -- Specific implementation for ingress controller. One of `generic`, `aws` or `gke`
      ## Additional configuration might be required in related configuration sections
      controller: generic
      # -- Defines which ingress controller will implement the resource
      ingressClassName: "traefik"

      # -- Argo CD server hostname
      # @default -- `""` (defaults to global.domain)
      hostname: rudgh21.com

      # -- The path to Argo CD server
      path: /argocd

      # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
      pathType: Prefix
      # -- Enable TLS configuration for the hostname defined at `server.ingress.hostname`
      ## TLS certificate will be retrieved from a TLS secret `argocd-server-tls`
      ## You can create this secret via `certificate` or `certificateSecret` option
      tls: false
      # annotations:
      #   nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      #   nginx.ingress.kubernetes.io/ssl-redirect: "false"
      #   nginx.ingress.kubernetes.io/configuration-snippet: "rewrite ^(/argocd)$ $1/ redirect;"